/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.portlet.model.impl;

import com.idetronic.portlet.model.FAQEntry;
import com.idetronic.portlet.model.FAQEntryModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the FAQEntry service. Represents a row in the &quot;FAQ_FAQEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.portlet.model.FAQEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FAQEntryImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see FAQEntryImpl
 * @see com.idetronic.portlet.model.FAQEntry
 * @see com.idetronic.portlet.model.FAQEntryModel
 * @generated
 */
public class FAQEntryModelImpl extends BaseModelImpl<FAQEntry>
	implements FAQEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a f a q entry model instance should use the {@link com.idetronic.portlet.model.FAQEntry} interface instead.
	 */
	public static final String TABLE_NAME = "FAQ_FAQEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "entryId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "question", Types.VARCHAR },
			{ "category", Types.VARCHAR },
			{ "answer", Types.VARCHAR },
			{ "isactive", Types.BOOLEAN },
			{ "displayOrder", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table FAQ_FAQEntry (entryId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,question VARCHAR(75) null,category VARCHAR(75) null,answer VARCHAR(75) null,isactive BOOLEAN,displayOrder LONG)";
	public static final String TABLE_SQL_DROP = "drop table FAQ_FAQEntry";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.portlet.model.FAQEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.portlet.model.FAQEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.idetronic.portlet.model.FAQEntry"),
			true);
	public static long CATEGORY_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.portlet.model.FAQEntry"));

	public FAQEntryModelImpl() {
	}

	public long getPrimaryKey() {
		return _entryId;
	}

	public void setPrimaryKey(long primaryKey) {
		setEntryId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_entryId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return FAQEntry.class;
	}

	public String getModelClassName() {
		return FAQEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("entryId", getEntryId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("question", getQuestion());
		attributes.put("category", getCategory());
		attributes.put("answer", getAnswer());
		attributes.put("isactive", getIsactive());
		attributes.put("displayOrder", getDisplayOrder());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long entryId = (Long)attributes.get("entryId");

		if (entryId != null) {
			setEntryId(entryId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String question = (String)attributes.get("question");

		if (question != null) {
			setQuestion(question);
		}

		String category = (String)attributes.get("category");

		if (category != null) {
			setCategory(category);
		}

		String answer = (String)attributes.get("answer");

		if (answer != null) {
			setAnswer(answer);
		}

		Boolean isactive = (Boolean)attributes.get("isactive");

		if (isactive != null) {
			setIsactive(isactive);
		}

		Long displayOrder = (Long)attributes.get("displayOrder");

		if (displayOrder != null) {
			setDisplayOrder(displayOrder);
		}
	}

	public long getEntryId() {
		return _entryId;
	}

	public void setEntryId(long entryId) {
		_entryId = entryId;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public String getQuestion() {
		if (_question == null) {
			return StringPool.BLANK;
		}
		else {
			return _question;
		}
	}

	public void setQuestion(String question) {
		_question = question;
	}

	public String getCategory() {
		if (_category == null) {
			return StringPool.BLANK;
		}
		else {
			return _category;
		}
	}

	public void setCategory(String category) {
		_columnBitmask |= CATEGORY_COLUMN_BITMASK;

		if (_originalCategory == null) {
			_originalCategory = _category;
		}

		_category = category;
	}

	public String getOriginalCategory() {
		return GetterUtil.getString(_originalCategory);
	}

	public String getAnswer() {
		if (_answer == null) {
			return StringPool.BLANK;
		}
		else {
			return _answer;
		}
	}

	public void setAnswer(String answer) {
		_answer = answer;
	}

	public Boolean getIsactive() {
		return _isactive;
	}

	public void setIsactive(Boolean isactive) {
		_isactive = isactive;
	}

	public long getDisplayOrder() {
		return _displayOrder;
	}

	public void setDisplayOrder(long displayOrder) {
		_displayOrder = displayOrder;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			FAQEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FAQEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FAQEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	public FAQEntry toUnescapedModel() {
		return (FAQEntry)this;
	}

	@Override
	public Object clone() {
		FAQEntryImpl faqEntryImpl = new FAQEntryImpl();

		faqEntryImpl.setEntryId(getEntryId());
		faqEntryImpl.setCompanyId(getCompanyId());
		faqEntryImpl.setUserId(getUserId());
		faqEntryImpl.setUserName(getUserName());
		faqEntryImpl.setCreateDate(getCreateDate());
		faqEntryImpl.setModifiedDate(getModifiedDate());
		faqEntryImpl.setQuestion(getQuestion());
		faqEntryImpl.setCategory(getCategory());
		faqEntryImpl.setAnswer(getAnswer());
		faqEntryImpl.setIsactive(getIsactive());
		faqEntryImpl.setDisplayOrder(getDisplayOrder());

		faqEntryImpl.resetOriginalValues();

		return faqEntryImpl;
	}

	public int compareTo(FAQEntry faqEntry) {
		long primaryKey = faqEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FAQEntry)) {
			return false;
		}

		FAQEntry faqEntry = (FAQEntry)obj;

		long primaryKey = faqEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		FAQEntryModelImpl faqEntryModelImpl = this;

		faqEntryModelImpl._originalCategory = faqEntryModelImpl._category;

		faqEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<FAQEntry> toCacheModel() {
		FAQEntryCacheModel faqEntryCacheModel = new FAQEntryCacheModel();

		faqEntryCacheModel.entryId = getEntryId();

		faqEntryCacheModel.companyId = getCompanyId();

		faqEntryCacheModel.userId = getUserId();

		faqEntryCacheModel.userName = getUserName();

		String userName = faqEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			faqEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			faqEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			faqEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			faqEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			faqEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		faqEntryCacheModel.question = getQuestion();

		String question = faqEntryCacheModel.question;

		if ((question != null) && (question.length() == 0)) {
			faqEntryCacheModel.question = null;
		}

		faqEntryCacheModel.category = getCategory();

		String category = faqEntryCacheModel.category;

		if ((category != null) && (category.length() == 0)) {
			faqEntryCacheModel.category = null;
		}

		faqEntryCacheModel.answer = getAnswer();

		String answer = faqEntryCacheModel.answer;

		if ((answer != null) && (answer.length() == 0)) {
			faqEntryCacheModel.answer = null;
		}

		faqEntryCacheModel.isactive = getIsactive();

		faqEntryCacheModel.displayOrder = getDisplayOrder();

		return faqEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{entryId=");
		sb.append(getEntryId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", question=");
		sb.append(getQuestion());
		sb.append(", category=");
		sb.append(getCategory());
		sb.append(", answer=");
		sb.append(getAnswer());
		sb.append(", isactive=");
		sb.append(getIsactive());
		sb.append(", displayOrder=");
		sb.append(getDisplayOrder());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.portlet.model.FAQEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>entryId</column-name><column-value><![CDATA[");
		sb.append(getEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>question</column-name><column-value><![CDATA[");
		sb.append(getQuestion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>category</column-name><column-value><![CDATA[");
		sb.append(getCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>answer</column-name><column-value><![CDATA[");
		sb.append(getAnswer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isactive</column-name><column-value><![CDATA[");
		sb.append(getIsactive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>displayOrder</column-name><column-value><![CDATA[");
		sb.append(getDisplayOrder());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = FAQEntry.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			FAQEntry.class
		};
	private long _entryId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _question;
	private String _category;
	private String _originalCategory;
	private String _answer;
	private Boolean _isactive;
	private long _displayOrder;
	private long _columnBitmask;
	private FAQEntry _escapedModel;
}