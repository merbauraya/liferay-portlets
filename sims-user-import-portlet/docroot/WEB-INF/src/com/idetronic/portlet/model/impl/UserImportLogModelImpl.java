/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.portlet.model.impl;

import com.idetronic.portlet.model.UserImportLog;
import com.idetronic.portlet.model.UserImportLogModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the UserImportLog service. Represents a row in the &quot;sims_UserImportLog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.portlet.model.UserImportLogModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserImportLogImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see UserImportLogImpl
 * @see com.idetronic.portlet.model.UserImportLog
 * @see com.idetronic.portlet.model.UserImportLogModel
 * @generated
 */
public class UserImportLogModelImpl extends BaseModelImpl<UserImportLog>
	implements UserImportLogModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user import log model instance should use the {@link com.idetronic.portlet.model.UserImportLog} interface instead.
	 */
	public static final String TABLE_NAME = "sims_UserImportLog";
	public static final Object[][] TABLE_COLUMNS = {
			{ "entryId", Types.BIGINT },
			{ "startTime", Types.TIMESTAMP },
			{ "endTime", Types.TIMESTAMP },
			{ "totalProcess", Types.BIGINT },
			{ "totalImport", Types.BIGINT },
			{ "totalError", Types.BIGINT },
			{ "summary", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "totalExisting", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table sims_UserImportLog (entryId LONG not null primary key,startTime DATE null,endTime DATE null,totalProcess LONG,totalImport LONG,totalError LONG,summary VARCHAR(75) null,createDate DATE null,totalExisting LONG)";
	public static final String TABLE_SQL_DROP = "drop table sims_UserImportLog";
	public static final String ORDER_BY_JPQL = " ORDER BY userImportLog.startTime DESC";
	public static final String ORDER_BY_SQL = " ORDER BY sims_UserImportLog.startTime DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.portlet.model.UserImportLog"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.portlet.model.UserImportLog"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.portlet.model.UserImportLog"));

	public UserImportLogModelImpl() {
	}

	public long getPrimaryKey() {
		return _entryId;
	}

	public void setPrimaryKey(long primaryKey) {
		setEntryId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_entryId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return UserImportLog.class;
	}

	public String getModelClassName() {
		return UserImportLog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("entryId", getEntryId());
		attributes.put("startTime", getStartTime());
		attributes.put("endTime", getEndTime());
		attributes.put("totalProcess", getTotalProcess());
		attributes.put("totalImport", getTotalImport());
		attributes.put("totalError", getTotalError());
		attributes.put("summary", getSummary());
		attributes.put("createDate", getCreateDate());
		attributes.put("totalExisting", getTotalExisting());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long entryId = (Long)attributes.get("entryId");

		if (entryId != null) {
			setEntryId(entryId);
		}

		Date startTime = (Date)attributes.get("startTime");

		if (startTime != null) {
			setStartTime(startTime);
		}

		Date endTime = (Date)attributes.get("endTime");

		if (endTime != null) {
			setEndTime(endTime);
		}

		Long totalProcess = (Long)attributes.get("totalProcess");

		if (totalProcess != null) {
			setTotalProcess(totalProcess);
		}

		Long totalImport = (Long)attributes.get("totalImport");

		if (totalImport != null) {
			setTotalImport(totalImport);
		}

		Long totalError = (Long)attributes.get("totalError");

		if (totalError != null) {
			setTotalError(totalError);
		}

		String summary = (String)attributes.get("summary");

		if (summary != null) {
			setSummary(summary);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long totalExisting = (Long)attributes.get("totalExisting");

		if (totalExisting != null) {
			setTotalExisting(totalExisting);
		}
	}

	public long getEntryId() {
		return _entryId;
	}

	public void setEntryId(long entryId) {
		_entryId = entryId;
	}

	public Date getStartTime() {
		return _startTime;
	}

	public void setStartTime(Date startTime) {
		_startTime = startTime;
	}

	public Date getEndTime() {
		return _endTime;
	}

	public void setEndTime(Date endTime) {
		_endTime = endTime;
	}

	public long getTotalProcess() {
		return _totalProcess;
	}

	public void setTotalProcess(long totalProcess) {
		_totalProcess = totalProcess;
	}

	public long getTotalImport() {
		return _totalImport;
	}

	public void setTotalImport(long totalImport) {
		_totalImport = totalImport;
	}

	public long getTotalError() {
		return _totalError;
	}

	public void setTotalError(long totalError) {
		_totalError = totalError;
	}

	public String getSummary() {
		if (_summary == null) {
			return StringPool.BLANK;
		}
		else {
			return _summary;
		}
	}

	public void setSummary(String summary) {
		_summary = summary;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public Long getTotalExisting() {
		return _totalExisting;
	}

	public void setTotalExisting(Long totalExisting) {
		_totalExisting = totalExisting;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			UserImportLog.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserImportLog toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UserImportLog)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	public UserImportLog toUnescapedModel() {
		return (UserImportLog)this;
	}

	@Override
	public Object clone() {
		UserImportLogImpl userImportLogImpl = new UserImportLogImpl();

		userImportLogImpl.setEntryId(getEntryId());
		userImportLogImpl.setStartTime(getStartTime());
		userImportLogImpl.setEndTime(getEndTime());
		userImportLogImpl.setTotalProcess(getTotalProcess());
		userImportLogImpl.setTotalImport(getTotalImport());
		userImportLogImpl.setTotalError(getTotalError());
		userImportLogImpl.setSummary(getSummary());
		userImportLogImpl.setCreateDate(getCreateDate());
		userImportLogImpl.setTotalExisting(getTotalExisting());

		userImportLogImpl.resetOriginalValues();

		return userImportLogImpl;
	}

	public int compareTo(UserImportLog userImportLog) {
		int value = 0;

		value = DateUtil.compareTo(getStartTime(), userImportLog.getStartTime());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserImportLog)) {
			return false;
		}

		UserImportLog userImportLog = (UserImportLog)obj;

		long primaryKey = userImportLog.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<UserImportLog> toCacheModel() {
		UserImportLogCacheModel userImportLogCacheModel = new UserImportLogCacheModel();

		userImportLogCacheModel.entryId = getEntryId();

		Date startTime = getStartTime();

		if (startTime != null) {
			userImportLogCacheModel.startTime = startTime.getTime();
		}
		else {
			userImportLogCacheModel.startTime = Long.MIN_VALUE;
		}

		Date endTime = getEndTime();

		if (endTime != null) {
			userImportLogCacheModel.endTime = endTime.getTime();
		}
		else {
			userImportLogCacheModel.endTime = Long.MIN_VALUE;
		}

		userImportLogCacheModel.totalProcess = getTotalProcess();

		userImportLogCacheModel.totalImport = getTotalImport();

		userImportLogCacheModel.totalError = getTotalError();

		userImportLogCacheModel.summary = getSummary();

		String summary = userImportLogCacheModel.summary;

		if ((summary != null) && (summary.length() == 0)) {
			userImportLogCacheModel.summary = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			userImportLogCacheModel.createDate = createDate.getTime();
		}
		else {
			userImportLogCacheModel.createDate = Long.MIN_VALUE;
		}

		userImportLogCacheModel.totalExisting = getTotalExisting();

		return userImportLogCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{entryId=");
		sb.append(getEntryId());
		sb.append(", startTime=");
		sb.append(getStartTime());
		sb.append(", endTime=");
		sb.append(getEndTime());
		sb.append(", totalProcess=");
		sb.append(getTotalProcess());
		sb.append(", totalImport=");
		sb.append(getTotalImport());
		sb.append(", totalError=");
		sb.append(getTotalError());
		sb.append(", summary=");
		sb.append(getSummary());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", totalExisting=");
		sb.append(getTotalExisting());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.portlet.model.UserImportLog");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>entryId</column-name><column-value><![CDATA[");
		sb.append(getEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startTime</column-name><column-value><![CDATA[");
		sb.append(getStartTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endTime</column-name><column-value><![CDATA[");
		sb.append(getEndTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalProcess</column-name><column-value><![CDATA[");
		sb.append(getTotalProcess());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalImport</column-name><column-value><![CDATA[");
		sb.append(getTotalImport());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalError</column-name><column-value><![CDATA[");
		sb.append(getTotalError());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>summary</column-name><column-value><![CDATA[");
		sb.append(getSummary());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalExisting</column-name><column-value><![CDATA[");
		sb.append(getTotalExisting());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = UserImportLog.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			UserImportLog.class
		};
	private long _entryId;
	private Date _startTime;
	private Date _endTime;
	private long _totalProcess;
	private long _totalImport;
	private long _totalError;
	private String _summary;
	private Date _createDate;
	private Long _totalExisting;
	private UserImportLog _escapedModel;
}